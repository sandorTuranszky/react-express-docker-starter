#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const log = require('../helpers/log');
const http = require('http');
const dbs = require('../db');
const config = require('config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.get('db.mongoose.port'));
app.set('port', port);

/**
 * Connect DBs
 */

dbs.mongodb();
const redisClient = dbs.redis();

// START TEST
let index =  0;
redisClient.get('index', function(err, reply) {
  index = reply;
});
app.get('/', (req, res) => {
    index++;
    redisClient.set('index', index)
    redisClient.hset('values', index, 'Nothing yet!');
    res.send(`Hello World! Test restart ${JSON.stringify(index)} from ip ${req.ip}`);
})

app.get('/value', (req, res) => {
    redisClient.hgetall('values', (err, values) => {
        res.send(`This has been saved in RedisLabs ${JSON.stringify(values)}`);
    });
})
// END TEST

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log.info(`Listening on ${bind}`);
}
